version: 2.0

# Acceptance Criteria
#
# Given a feature branch of WUF
# When it changes on GitHub
# Then its code is built and tested but not published
#
# Given origin/master of WUF
# When it changes on GitHub
# Then its code is built, tested, tagged and the packages pushed to NPM, and the projectâ€™s Git pages

jobs:
  build:
    docker:
      - image: wasvic/node_dev:1.0.0-FM-188-SNAPSHOT
        entrypoint: /bin/sh
    working_directory: ~/wuf
    environment:
      - MASTER_BRANCH: master
      - DEPLOY_BRANCH: WUF-77-deply-nonroot
      - TARGET_BRANCH: gh-pages
      - GH_EMAIL: anvil.open.source.machine.user@gmail.com
      - GH_NAME: anvil-open-source-machine-user
      - CHROME_BIN: /usr/lib/chromium/chrome
    steps:
      - run:
          name: Install OS tools
          # TODO: replace with install_os_pkgs.sh script
          command: |
            apk update && apk add git
            apk add bash
            apk add openssh
            apk add tar
            apk add ca-certificates
            apk update && apk upgrade && \
            echo @edge http://nl.alpinelinux.org/alpine/edge/community >> /etc/apk/repositories
            echo @edge http://nl.alpinelinux.org/alpine/edge/main >> /etc/apk/repositories
            apk add --no-cache \
               chromium@edge \
               nss@edge \
               freetype@edge \
               harfbuzz@edge \
               ttf-freefont@edge
            apk add --no-cache ttf-freefont

      #  chekout projectt
      - checkout
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - yarn-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-v1-{{ .Branch }}-
            - node-v1-
      - run:
          name: Install WUF
          command: |
            yarn bootstrap
      - save_cache:
          paths:
            - ./node_modules  # location depends on npm version
          key: yarn-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Build WUF
          command: |
            ng build --prod --base-href https://anvil-open-software.github.io/wuf/ --deploy-url https://anvil-open-software.github.io/wuf/
      - run:
          name: Test WUF
          command: |
            ng test --karmaConfig=src/karma.conf.circleci.js
      - run:
          # TODO: Tagging is working, but disabled. Enable it when ready for production
          name: Tag WUF
          command: |
            if [ $CIRCLE_BRANCH == $DEPLOY_BRANCH ]; then
              git config --global user.email $GH_EMAIL
              git config --global user.name $GH_NAME

              # Set the tag to be the package.json version
              # For branches other than master, append an unique value to
              # provent build failures.
              GITTAG=v$(npx -c 'echo "$npm_package_version"')
              if [ $DEPLOY_BRANCH != $MASTER_BRANCH ]; then
              	GITTAG=$(echo $GITTAG-Build.$CIRCLE_BUILD_NUM)
              fi
              echo Taging $CIRCLE_BRANCH: $GITTAG

              # Using annotated tags; required to include tag to prevent build from running
              # when checking in the tag [https://circleci.com/docs/2.0/skip-build/]
              git tag -a $GITTAG -m "Pull Request Tag [skip build]"
              git push origin $GITTAG
            fi
      - run:
          name: Deploy WUF
          # TODO: replace with a deploy.sh script
          command: |
            if [ $CIRCLE_BRANCH == $DEPLOY_BRANCH ]; then
              git config --global user.email $GH_EMAIL
              git config --global user.name $GH_NAME

              git clone $CIRCLE_REPOSITORY_URL out

              cd out
              git checkout $TARGET_BRANCH || git checkout --orphan $TARGET_BRANCH
              git rm -rf .
              cd ..

              cp -a dist/. out/.

              mkdir -p out/.circleci && cp -a .circleci/. out/.circleci/.
              cd out

              git add -A
              git commit -m "Automated deployment to GitHub Pages: ${CIRCLE_SHA1}" --allow-empty

              git push origin $TARGET_BRANCH
            fi
