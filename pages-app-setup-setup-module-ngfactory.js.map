{"version":3,"sources":["webpack:///./src/app/pages/app-setup/base-styles/base-styles.component.html","webpack:///./src/app/pages/app-setup/base-styles/base-styles.component.ts","webpack:///./src/app/pages/app-setup/configuration/configuration.component.html","webpack:///./src/app/pages/app-setup/configuration/configuration.component.ts","webpack:///./src/app/pages/app-setup/css-properties/css-properties.component.html","webpack:///./src/app/pages/app-setup/css-properties/css-properties.component.ts","webpack:///./src/app/pages/app-setup/layout-components/layout-components.component.html","webpack:///./src/app/pages/app-setup/layout-components/layout-components.component.ts","webpack:///./src/app/pages/app-setup/main-basic/main-basic.component.html","webpack:///./src/app/pages/app-setup/main-basic/main-basic.component.ts","webpack:///./src/app/pages/app-setup/routes.ts","webpack:///./src/app/pages/app-setup/setup-intro/setup-intro.component.html","webpack:///./src/app/pages/app-setup/setup-intro/setup-intro.component.ts","webpack:///./src/app/pages/app-setup/setup.module.ts"],"names":[],"mappings":"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","file":"pages-app-setup-setup-module-ngfactory.js","sourcesContent":["<!--\n  ~ Copyright (c) 2018 Dematic, Corp.\n  ~ Licensed under the MIT Open Source: https://opensource.org/licenses/MIT\n  -->\n\n<wuf-content-header>\n    <!-- insert page header content here -->\n    <ng-container toolbarLeft>\n        <wuf-breadcrumb\n            [items]=\"[{ link: '/', label: 'Introduction' }, { link: '/setup', label: 'Application Setup' }, { link: null, label: 'Base Styles', active: true }]\"></wuf-breadcrumb>\n    </ng-container>\n\n    <ng-container toolbarRight>\n        <!--page-level utilities here-->\n    </ng-container>\n</wuf-content-header>\n\n<wuf-content-main>\n    <!-- insert page content here -->\n\n    <markdown path=\"assets/documentation/packages/wuf-web-assets/README.md\"></markdown>\n\n    <hr>\n\n    <h2>Add Meta Tags</h2>\n\n    <p>We also need some key &lt;meta&gt; tags in the &lt;head&gt; of the <code>index.html</code> of our application in\n        order to enable responsive layouts. Be sure your <code>index.html</code> page includes the following tags in the\n        &lt;head&gt; section:</p>\n\n    <wuf-code-sample type=\"html\" [code]=\"headCode\"></wuf-code-sample>\n    <caption>meta tags for use in your <strong>index.html</strong> file</caption>\n\n    <hr>\n\n    <h2>Quick Start Application</h2>\n    <p>If you are using a Quick Start-based app, all of the above is already done for you.</p>\n\n</wuf-content-main>\n\n<wuf-content-footer>\n    <!-- insert page footer content here -->\n</wuf-content-footer>\n","/*\n * Copyright (c) 2018 Dematic, Corp.\n * Licensed under the MIT Open Source: https://opensource.org/licenses/MIT\n */\n\nimport { Component, OnInit } from '@angular/core';\n\n\n@Component({\n    selector: 'app-layout-base-styles',\n    templateUrl: './base-styles.component.html',\n    styleUrls: ['./base-styles.component.scss']\n})\nexport class SetupBaseStylesComponent implements OnInit {\n\n    headCode = `<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    `;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n}\n","<!--\n  ~ Copyright (c) 2018 Dematic, Corp.\n  ~ Licensed under the MIT Open Source: https://opensource.org/licenses/MIT\n  -->\n\n<wuf-content-header>\n    <!-- insert page header content here -->\n    <ng-container toolbarLeft>\n        <wuf-breadcrumb\n            [items]=\"[{ link: '/', label: 'Introduction' }, { link: '/setup', label: 'Application Setup' }, { link: null, label: 'Configuration', active: true }]\"></wuf-breadcrumb>\n    </ng-container>\n\n    <ng-container toolbarRight>\n        <!--page-level utilities here-->\n    </ng-container>\n</wuf-content-header>\n\n<wuf-content-main>\n    <!-- insert page content here -->\n\n    <app-component-tabs [tabLabel_1]=\"'Intro'\" [tabLabel_2]=\"'API'\">\n        <!-- Component name -->\n        <div class=\"component_tabs_name\">Application Configuration</div>\n\n        <!-- EXAMPLE Content -->\n        <div class=\"component_tabs_1\">\n\n            <p>The <strong>WufConfigurationService</strong>, from common components, is used to configure the application\n                in different ways. For example, configuration settings may include where to position the navigation\n                panel (e.g., left or top) or the default application theme to use (e.g., dark or light). The\n                configuration service is also used to keep track of some application state (e.g., the current size of\n                the resizable sidebar panel) while the user is interacting with the application.</p>\n\n            <p>The <strong>WufConfigurationService</strong> service is responsible for storing and retrieving application\n                configuration data in local storage, providing those setting to the rest of the application, and then\n                broadcasting any configuration updates. Components from common components, as well as the application\n                itself, can then use the <strong>WufConfigurationService</strong> service's data to configure themselves\n                in different ways. In this way, the <strong>WufConfigurationService</strong> service serves as a central\n                hub for updating and retrieving application configuration data.</p>\n\n            <p>The <strong>WufConfigurationService</strong> service provides certain defaults for a given application\n                while allowing the user to override those defaults while interacting with a given application. By\n                storing these settings on both the backend and in local storage, we can then persist these settings\n                across user sessions as well as across any device both with and without a network connection.</p>\n\n            <p>While the <strong>WufConfigurationService</strong> service is responsible for saving configuration to\n                local storage, it will <strong>NOT</strong> send your updated config information back to the server for\n                you. However, it's very easy to subscribe to configuration updates within your app and then, when your\n                app is notified of configuration changes, send those changes back to the server. The server can then do\n                whatever it wants with that configuration data (like save it in a database). See the <strong>Persisting\n                    Configuration</strong> section below.</p>\n            <hr>\n\n            <h2>Sources of Configuration Data</h2>\n\n            <p>The <strong>WufConfigurationService</strong> service should be used to manage configuration settings. The\n                values for these settings themselves can come from a number of different sources, including:</p>\n\n            <ul>\n                <li>Data from component defaults</li>\n                <li>Data from application defaults</li>\n                <li>Data from local storage</li>\n                <li>Data from the server</li>\n            </ul>\n\n            <h4>Component Defaults</h4>\n\n            <p>Any component that uses configuration data should be coded by the developer with some built-in defaults.\n                The navigation component, for example, uses \"left\" as the default orientation. This means that if the\n                navigation component receives <em>no values</em> from the <strong>WufConfigurationService</strong>\n                service, it will default to left. There is no need for an application developer to provide these values\n                since they are built in to the components themselves.</p>\n\n            <p>The <strong>WufConfigurationService</strong> service itself includes the following default values (which\n                are stored in JSON format).  These values handle basic default layout:</p>\n\n            <wuf-code-sample [code]=\"serviceDefaultExample\" type=\"javascript\"></wuf-code-sample>\n\n            <h4>Application Defaults</h4>\n\n            <p>The application should include some default values. For the Living Style Guide, these values are stored\n                in a file at <code>/src/app/_internal/configuration/configuration.ts</code>. This file has the following\n                values which focus primarily on application-specific values:</p>\n\n            <wuf-code-sample [code]=\"appDefaultExample\" type=\"javascript\"></wuf-code-sample>\n\n            <h4>Server Data</h4>\n\n            <p>When a user logs in, the backend should send some minimal configuration data to the application. This\n                data can be stored in the user's JWT payload or requested via a separate API call.</p>\n\n            <p>Any data sent from the server will take precedence over data from any other source. This allows the\n                server to override any local user settings should it need to.</p>\n\n            <p>Minimal data from the server should include:</p>\n\n            <ul>\n                <li>User ID</li>\n                <li>username</li>\n                <li>First Name</li>\n                <li>Last Name</li>\n            </ul>\n\n            <wuf-code-sample [code]=\"serverDataExample\" type=\"javascript\"></wuf-code-sample>\n\n            <p>Note that this JSON object only has one property: \"user\", which provides an object of its own. The user\n                ID from the user object is used to store application settings in local storage under a unique storage\n                key from application ID + user ID. Note that it is good practice for the the user object from the server\n                to <em>not</em> include password data.</p>\n\n            <p>As noted above, any setting data from the server will override setting data from any other sources. This\n                means that server data can also include application id, navigation, theme, and other properties, as\n                necessary.</p>\n\n            <h4>Local Storage</h4>\n\n            <p>Whenever configuration data is received from the server or generated locally through user interaction\n                (e.g., changing the theme from light to dark), the complete set of configuration data is stored locally\n                in the browser's local storage. This allows us to re-use this data should the network fail, for\n                example.</p>\n\n            <h4>Putting it All Together</h4>\n\n            <p>As described above, configuration data can come from a number of different sources. The <strong>WufConfigurationService</strong>\n                service will then smartly merge configuration data from these sources together into a single\n                configuration object using the following priority order:</p>\n\n            <ol>\n                <li>If user settings are received from the backend with new attributes or with modified values, use\n                    these new/modified values. Server settings overrule all other settings.\n                </li>\n                <li>If no new or modified setting values are received from server, use setting values stored in local\n                    storage. These stored values were saved there during a previous user session.\n                </li>\n                <li>If no local or stored settings values exist, use default application settings pulled from the\n                    application's configuration file <code>/src/app/_internal/configuration/configuration.ts</code>.\n                </li>\n                <li>If no default application settings exist in\n                    <code>/src/app/_internal/configuration/configuration.ts</code>, use the default settings baked into\n                    each components (which should always be coded with default values).\n                </li>\n            </ol>\n\n            <p>By <em>merging</em> data in this way, any of the data sources can send <em>partial configuration\n                data</em> (in JSON format) to the service. Property/value data that doesn't yet exist in the\n                configuration the configuration object managed by the <strong>WufConfigurationService</strong> are added\n                while the values for existing properties are replaced with the new values.</p>\n\n            <p>The above cascade order ensures that any configuration value sent from the server <strong>always</strong>\n                wins. Given that this is the case, it's important that the server only override local settings when\n                necessary.</p>\n\n            <hr>\n\n            <h2>Loading Application Configuration</h2>\n\n            <p>The Living Style Guide (this application) provides an example of the above configuration retrieval,\n                merging, and local storage behavior in <code>app.component.ts</code>:</p>\n\n            <wuf-code-sample [code]=\"appComponentExample\" type=\"typescript\"></wuf-code-sample>\n            <caption>/src/app/app.component.ts</caption>\n\n            <p>The <code>this.userService.authenticate(fakeLoginData).subscribe()</code> line is called from <code>ngOnInit()</code>.\n                This is done to simulate a user login and subscribe to the results. Note that since this application\n                doesn't have a backend, we are using a <code>HttpInterceptor</code> from <code>src/app/internal/fake-backend.service.ts</code>\n                to intercept URL requests to <code>'/api/*'</code> and return fake data. In a production environment,\n                this file should be removed so that all requests are passed through to an API service.</p>\n\n            <p>The login process returns an object with user data. This object is then passed to the\n                getMergedConfiguration() function where user data is merged with data (if any) from local storage and\n                application defaults. Once the merged configuration is returned, it is passed to the <code>WufConfigurationService</code>\n                with the line:</p>\n\n            <pre><code>this.configService.config = mergedConfiguration;</code></pre>\n\n            <p>The <strong>WufConfigurationService</strong> service then updates the config in memory and saves it to\n                local storage. The <code>WufConfigurationService</code> then broadcasts that the configuration object in\n                memory has been updated.</p>\n\n            <p>The following line shows the subscription to the onConfigChange() observable within <code>app.component.ts</code>:\n            </p>\n\n            <pre><code>this.configService.onConfigChange().subscribe()</code></pre>\n\n            <p>When the broadcast of an updated configuration is received, the <code>onConfigChange()</code> method is\n                called and passed the updated configuration object. The <code>onConfigChange()</code> function then\n                decides what, if anything, to do with the updated config. In this case, it looks for a new theme id and,\n                if found, applies that theme id to the root &lt;html&gt; tag. It also looks to see if a dark theme\n                should be applied and updates the &lt;html&gt; tag as necessary. The browser then renders the new\n                styling accordingly.</p>\n\n            <h2>Persisting Configuration</h2>\n\n            <p>It's also important to ensure that local settings created by the user during interaction (e.g., switching\n                from light to dark theme) be sent back to the server so that these settings can be persisted across user\n                sessions, browsers, and devices. In the code above the <code>onConfigChange()</code> function includes a\n                note about where/when you should send configuration data back to the server.</p>\n\n            <hr>\n        </div>\n\n        <div class=\"component_tabs_2\">\n            <h2>Installation</h2>\n\n            <p>The <strong>WufConfigurationService</strong> service is included in the\n                <strong>@anviltech/wuf-ang-configuration</strong> package, which is already included in an Quick Start-based\n                app.\n            </p>\n\n            <p>If not already installed, you can install it with the following command:</p>\n\n            <pre><code>npm install @anviltech/wuf-ang-configuration --save</code></pre>\n\n            or\n\n            <pre><code>yarn add @anviltech/wuf-ang-configuration</code></pre>\n\n            <p>Be sure this component is imported from your <code>app.module.ts</code>\n            page:</p>\n\n            <wuf-code-sample type=\"typescript\" [code]=\"setupCode1\"></wuf-code-sample>\n\n            <p>And then add it to the <code>providers</code> array of <code>app.module.ts</code>:</p>\n\n            <wuf-code-sample type=\"typescript\" [code]=\"setupCode2\"></wuf-code-sample>\n\n            <p>Every submodule in your application must also import the service and add it to the corresponding <code>*.module.ts</code>\n                page for the submodule.</p>\n\n            <p>When using the service inside of a component (in order to access configuration properties or to subscribe\n                to configuration updates) you must also add the service to the component page itself. See the examples\n                under the <strong>Intro</strong> section.</p>\n\n            <h2>Properties</h2>\n            <p>The configuration object is purposefully defined of type &lt;any&gt; so that it can take any shape an\n                application developer needs it to. However, in order for components, app layout, etc. to make use of\n                properties stored in the configuration object, certain properties/structures are expected, as\n                follows:</p>\n            <table class=\"table prop-table\">\n                <thead>\n                <tr>\n                    <th>Property</th>\n                    <th>Type</th>\n                    <th>Default</th>\n                    <th>Description</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr>\n                    <td class=\"prop-name\">id</td>\n                    <td class=\"prop-type\"><code>string</code></td>\n                    <td class=\"prop-default\">'wuf-application'</td>\n                    <td class=\"prop-description\">The application ID. Combined with user ID to create a unique local\n                        storage key for the configuration object.\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"prop-name\">name</td>\n                    <td class=\"prop-type\"><code>string</code></td>\n                    <td class=\"prop-default\">none</td>\n                    <td class=\"prop-description\">The application's display name. Used to display an application name in\n                        the header as well as in HTML meta data (e.g., title tag).\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"prop-name\">copyrightName</td>\n                    <td class=\"prop-type\"><code>string</code></td>\n                    <td class=\"prop-default\">empty string</td>\n                    <td class=\"prop-description\">The name to display with date for copyright info. Copyright info\n                        typically displays in the sidebar footer. If navigation is set to display at the top, however,\n                        copyright data may not be displayed.\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"prop-name\">navigation</td>\n                    <td class=\"prop-type\"><code>object</code></td>\n                    <td class=\"prop-default\">N/A</td>\n                    <td class=\"prop-description\">The navigation property includes nested properties that control\n                        navigation layout, sizing, etc.\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"prop-name\">navigation.position</td>\n                    <td class=\"prop-type\"><code>string</code></td>\n                    <td class=\"prop-default\">'left'</td>\n                    <td class=\"prop-description\">Can be any of: 'left', 'top'. Controls the positioning of the\n                        navigation panel within the UI.\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"prop-name\">navigation.alignment</td>\n                    <td class=\"prop-type\"><code>string</code></td>\n                    <td class=\"prop-default\">'left'</td>\n                    <td class=\"prop-description\">Can be any of: 'left', 'center', or 'right'. Controls the alignment of\n                        navigation items within the header.\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"prop-name\">navigation.iconPosition</td>\n                    <td class=\"prop-type\"><code>string</code></td>\n                    <td class=\"prop-default\">'left'</td>\n                    <td class=\"prop-description\">Only applicable when the navigation.position is set to 'top'. Controls\n                        the position of the navigation element's icon relative to the text label.\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"prop-name\">theme</td>\n                    <td class=\"prop-type\"><code>string</code></td>\n                    <td class=\"prop-default\">none</td>\n                    <td class=\"prop-description\">This is an open field that can be used to hold a theme name or\n                        a theme URL, or some other property which you can use to set a theme upon a config change.\n                        See <a routerLink=\"/themes\">themes</a> for more information on creating and using a theme.\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"prop-name\">user</td>\n                    <td class=\"prop-type\"><code>object</code></td>\n                    <td class=\"prop-default\">N/A</td>\n                    <td class=\"prop-description\">The user object contains properties specific to a user. The only\n                        required property is \"id\" (see below)\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"prop-name\">user.id</td>\n                    <td class=\"prop-type\"><code>string</code></td>\n                    <td class=\"prop-default\">none</td>\n                    <td class=\"prop-description\">A user's unique ID. Combined with application ID to create a unique\n                        local storage key for the configuration object. If no user ID is provided, all users will share\n                        the same configuration object, stored under a storage key named application ID + \"default\".\n                        Settings like theme, sidebar panel width, etc. will persist across users when sharing the same\n                        machine/browser.\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"prop-name\">user.username</td>\n                    <td class=\"prop-type\"><code>string</code></td>\n                    <td class=\"prop-default\">'defaultUser'</td>\n                    <td class=\"prop-description\">A user's unique username, used for login.</td>\n                </tr>\n                <tr>\n                    <td class=\"prop-name\">user.firstName</td>\n                    <td class=\"prop-type\"><code>string</code></td>\n                    <td class=\"prop-default\">none</td>\n                    <td class=\"prop-description\">A user's first name. Can be used in the UI, as necessary.</td>\n                </tr>\n                <tr>\n                    <td class=\"prop-name\">user.lastName</td>\n                    <td class=\"prop-type\"><code>string</code></td>\n                    <td class=\"prop-default\">none</td>\n                    <td class=\"prop-description\">A user's last name. Can be used in the UI, as necessary.</td>\n                </tr>\n                </tbody>\n            </table>\n\n\n            <h3>WufConfigurationService Methods</h3>\n\n            <table class=\"table prop-table\">\n                <thead>\n                <tr>\n                    <th>Method</th>\n                    <th>Description</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr>\n                    <td class=\"prop-name\">WufConfigurationService.config(newConfig: WufConfiguration)</td>\n                    <td class=\"prop-description\">\n                        A setter that merges any partial configuration object into the existing configuration object (if any).  New configs are stored in local storage.  Config updates are broadcast upon change.\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"prop-name\">WufConfigurationService.config()</td>\n                    <td class=\"prop-description\">\n                        A getter that returns the current config object.\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"prop-name\">WufConfigurationService.setTempConfig(newConfig: WufConfiguration)</td>\n                    <td class=\"prop-description\">\n                        Unlike the config setter, this method will not store a config to local storage.  This is helpful when a user may want to play around with a config without permanently storing it.\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"prop-name\">WufConfigurationService.setStorageKey(keyName: string)</td>\n                    <td class=\"prop-description\">\n                        Override the default storage key name with another key name.\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"prop-name\">WufConfigurationService.getStorageKey(appId?: string, userId?: string)</td>\n                    <td class=\"prop-description\">\n                        Get the default storage key.\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n\n        </div>\n    </app-component-tabs>\n\n</wuf-content-main>\n\n<wuf-content-footer>\n    <!-- insert page footer content here -->\n</wuf-content-footer>\n","/*\n * Copyright (c) 2018 Dematic, Corp.\n * Licensed under the MIT Open Source: https://opensource.org/licenses/MIT\n */\n\nimport { Component, OnInit } from '@angular/core';\n\n\n@Component({\n    selector: 'app-configuration',\n    templateUrl: './configuration.component.html',\n    styleUrls: ['./configuration.component.scss']\n})\nexport class SetupConfigurationComponent implements OnInit {\n\n    serviceDefaultExample = `\n    {\n        navigation: {\n            position: 'left',\n            iconPosition: 'left',\n            alignment: 'left'\n        },\n        themeDark: false,\n        sidebarSize: 230\n    }\n    `;\n\n    serverDataExample = `\n    {\n        \"user\": {\n            id: 147123-874793-75782819,\n            username: 'tonystark',\n            firstName: 'Tony',\n            lastName: 'Stark'\n        }\n    }\n    `;\n\n    appDefaultExample = `\n    {\n        id:                 'living-style-guide',\n        name:               'Living Style Guide',\n        copyrightName:      'ACME, Inc.'\n        navigation: {\n            position:       'left',\n            iconPosition:   'left',\n            alignment:      'left'\n        },\n        theme:              'default',\n    }\n    `;\n\n    appComponentExample = `\n        import { Component, ViewEncapsulation, OnInit, Renderer2, OnDestroy } from '@angular/core';\n\n        import { WufConfigurationService } from '@anviltech/wuf-ang-configuration'\n        import { deepMerge } from '@anviltech/wuf-ang-utils';\n        import { UserService } from './internal/services/user.service';\n        \n        // The following imports are only used for demo purposes\n        import { configuration } from './internal/configuration/configuration';\n        import { FakeUser } from './internal/fake-backend.service';\n        \n        \n        @Component({\n            selector: 'app-root',\n            templateUrl: './app.component.html',\n            styleUrls: ['./app.component.scss'],\n            providers: [ WufConfigurationService, UserService ],\n            encapsulation: ViewEncapsulation.Emulated\n        })\n        export class AppComponent implements OnInit, OnDestroy {\n        \n            config: any = configuration;\n            configSubscription: any;\n            currentThemeId: string;\n        \n            constructor(private configService: WufConfigurationService, private renderer: Renderer2, private userService: UserService) {\n            }\n        \n            ngOnInit() {\n                /*\n                    FAKING LOGIN\n                    Since this app has no backend, we are not presenting the user with a login screen.\n                    However, we still need user data in order to create a proper configuration object.\n                    In order to fake it, we get fake username and password info from the FakeUser object\n                    of fake-backend.service, which simulates data collection from a login screen.\n        \n                    Once we have fake username/password we proceed as any production app would and pass this\n                    info into the UserService's authenticate() method. This method will then send an\n                    authentication request to '/api/authenticate'.\n        \n                    Because there is no backend, we need to intercept '/api/authenticate' using an HttpInterceptor.\n                    This is what fakeBackendProvider does for us.\n        \n                    This process will simulate the effect of logging in and then assembling a full configuration object\n                    which can then be used throughout this application.\n        \n                    NOTE: The above process happens upon every browser refresh.  Obviously, if this were a\n                    production application, we would only want to do this process when the user session\n                    or the user token (if using JWT) has expired.  This app makes no assumptions about (or has\n                    any opinions on) the login process.\n                */\n        \n                // Get fake login info from FakeUser object of fake-backend.service\n                let fakeLoginData = {\n                    username: FakeUser.username,\n                    password: FakeUser.password\n                };\n        \n                // Authenticate using fake username/password\n                this.userService.authenticate(fakeLoginData).subscribe(\n                    data => {\n                        // success\n                        let user = {\n                            user: data\n                        };\n        \n                        // Merge received user data with configuration data from local storage\n                        let mergedConfiguration = this.getMergedConfiguration(user);\n        \n                        // Send merged configuration data to the config service (which updates the UI accordingly)\n                        this.configService.config = mergedConfiguration;\n                    },\n                    error => {\n                        // error\n                        console.warn('Error retrieving config from server. Error:', error)\n                    }\n                );\n        \n                // Subscribe to configuration updates\n                this.configSubscription = this.configService.onConfigChange().subscribe(\n                    newConfig => {\n                        this.onConfigChange(newConfig);\n                    },\n                    err => {\n                        console.warn('error on subscription:', err);\n                    }\n                );\n            }\n        \n            ngOnDestroy() {\n                // unsubscribe to ensure no memory leaks\n                if (this.configSubscription && !this.configSubscription.closed) {\n                    this.configSubscription.unsubscribe();\n                }\n            }\n        \n            getMergedConfiguration(userData: any) {\n                /* Create a config object comprised of data from various sources:\n                    1. If user settings are received from backend with new attributes or with modified values, use these new/modified values\n                    2. If no new or modified setting values are received from server, use locally stored setting values\n                    3. If no local or stored settings values exist, use default application settings pulled from Angular's environment \n                    properties\n                    4. If no default application settings exist in Angular's environment properties, use the default settings baked into the\n                     application and application components.  Nothing to do here since those properties live in the components themselves.\n                */\n                let key = this.configService.getStorageKey(this.config.id,  userData.user.id);\n        \n                return deepMerge(\n                    {},\n                    this.config, // start with default app config\n                    this.configService.getStoredConfig(key), // apply config from local storage, if any\n                    userData // data from server response trumps all\n                );\n        \n            }\n        \n            onConfigChange(newConfig: any) {\n                // Received notification of a config update.  Do something with each updated property, if applicable.\n        \n                // Apply a theme\n                if (newConfig.hasOwnProperty('theme') && newConfig.theme !== this.currentThemeId) {\n                    this.applyTheme(newConfig.theme);\n                }\n        \n                // Apply dark theme\n                if (newConfig.hasOwnProperty('themeDark')) {\n                    this.applyDarkTheme(newConfig.themeDark);\n                }\n                \n                // Config has already been applied to local storage.  Now send updated config back to server for DB storage.\n                // (This is where you should send configuration updates back to the server for server-side persistence)\n            }\n        \n            applyTheme(themeId: string) {\n                // Set the 'wuf-theme' property on the <html> element.  This is what makes the SCSS selectors inside \n                // /src/assets/dummydata/branding work.\n                this.currentThemeId = themeId;\n                this.renderer.setAttribute(document.documentElement, 'wuf-theme', themeId);\n            }\n        \n            applyDarkTheme(applyDark: boolean) {\n                if (!applyDark) {\n                    // Remove the 'wuf-theme-dark' property, if no longer applicable\n                    this.renderer.removeAttribute(document.documentElement, 'wuf-theme-dark');\n                }\n                else if (applyDark) {\n                    // Set the 'wuf-theme-dark' property on the <html> element.  This is what makes the SCSS selectors inside \n                    // /src/assets/dummydata/branding work.\n                    this.renderer.setAttribute(document.documentElement, 'wuf-theme-dark', \"true\");\n                }\n            }\n        \n        }\n    `;\n\n    setupCode1 = `import { WufConfigurationModule, WufConfigurationService } from '@anviltech/wuf-ang-configuration';`;\n    setupCode2 = `\n    providers: [\n        WufConfigurationService\n    ],\n    `;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n}\n","<!--\n  ~ Copyright (c) 2018 Dematic, Corp.\n  ~ Licensed under the MIT Open Source: https://opensource.org/licenses/MIT\n  -->\n\n<wuf-content-header>\n    <!-- insert page header content here -->\n    <ng-container toolbarLeft>\n        <wuf-breadcrumb\n            [items]=\"[{ link: '/', label: 'Introduction' }, { link: '/setup', label: 'Application Setup' }, { link: null, label: 'CSS Custom Properties Reference', active: true }]\"></wuf-breadcrumb>\n    </ng-container>\n\n    <ng-container toolbarRight>\n        <!--page-level utilities here-->\n    </ng-container>\n</wuf-content-header>\n\n<wuf-content-main>\n    <!-- insert page content here -->\n\n    <h1>CSS Variables (i.e., CSS Custom Properties) Reference</h1>\n\n    <p>The following theme-related CSS custom properties are available to use throughout your application's CSS files\n        should you decide to use them to further customize your brand's appearance. By default, the values of these\n        properties are set to use the Dematic brand theme. However, you can easily override all of the following default\n        value with your own theme values using the SCSS methods defined in the <a routerLink=\"/themes/themes\">Theme\n        System</a> documentation.</p>\n\n    <p>The following CSS custom properties are global in nature. In other words, they are not bound to any specific\n        component, per se. Therefore, we are documenting these properties under the \"Layout\" section even though some of\n        these are not directly applicable to layouts.</p>\n\n    <hr>\n\n    <h2>Colors</h2>\n\n    <p>These values can be overwritten using the <code>wuf-theme-colors()</code> method. See <a\n        routerLink=\"/themes/themes\">Theme System</a> documentation for more information.</p>\n\n    <table class=\"table table-striped css-props-table\">\n        <thead>\n        <tr>\n            <th width=\"30%\">CSS Custom property</th>\n            <th>Description</th>\n            <th style=\"min-width: 150px;\">Value</th>\n        </tr>\n        </thead>\n        <tr class=\"section-title\">\n            <td colspan=\"3\">body</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-body-bg</td>\n            <td class=\"description\">The background color for a page's content area</td>\n            <td class=\"value\">var(--wuf-color-gray-100)</td>\n        </tr>\n        <tr class=\"section-title\">\n            <td colspan=\"3\">\n                border\n                <div _ngcontent-c9=\"\" class=\"description\">\n                    Border properties are used to apply border values to all elements with borders. &lt;hr&gt; and &lt;table&gt;\n                    tags, for example, all use these values for decorating their borders.\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-border-width</td>\n            <td class=\"description\">The width used for borders</td>\n            <td class=\"value\">1</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-border-color</td>\n            <td class=\"description\">The color used for borders</td>\n            <td class=\"value\">var(--wuf-color-gray-300)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-border-radius</td>\n            <td class=\"description\">The default corner radius value used for SCSS border-radius mixins.</td>\n            <td class=\"value\">.25rem</td>\n        </tr>\n        <tr class=\"section-title\">\n            <td colspan=\"3\">page layout</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-page-width</td>\n            <td class=\"description\">The \"page\" is the outmost container for all application pages, including the app's\n                chrome, navigation elements, header, footer, etc. It's recommended to keep this outmost wrapper at 100%\n                width of the browser's window.\n            </td>\n            <td class=\"value\">100%</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-page-padding</td>\n            <td class=\"description\">The padding, if any, to show between the browser window's chrome and the \"page\"\n                wrapper.\n            </td>\n            <td class=\"value\">0</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-page-margin</td>\n            <td class=\"description\">The margin, if any, to show between around the \"page\" wrapper. Setting this value to\n                \"0 auto\" will cause page content to be placed in the center of the page.\n            </td>\n            <td class=\"value\">0</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-content-padding</td>\n            <td class=\"description\">The padding to show inside the main content area.</td>\n            <td class=\"value\">20px</td>\n        </tr>\n        <tr class=\"section-title\">\n            <td colspan=\"3\">footer</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-footer-height</td>\n            <td class=\"description\">The height of footers (the default value for both content footer and sidebar\n                footer).\n            </td>\n            <td class=\"value\">35px</td>\n        </tr>\n        <tr class=\"section-title\">\n            <td colspan=\"3\">content footer</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-content-footer-height</td>\n            <td class=\"description\">The height of the content footer.</td>\n            <td class=\"value\">var(--wuf-footer-height)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-content-footer-bg-color</td>\n            <td class=\"description\">The background color of the content footer.</td>\n            <td class=\"value\">rgba(255,255,255,.9)</td>\n        </tr>\n        <tr class=\"section-title\">\n            <td colspan=\"3\">primary color</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-header-color</td>\n            <td class=\"description\">The text color for header content.</td>\n            <td class=\"value\">var(--wuf-color-primary-lighter-50)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-header-bg-color</td>\n            <td class=\"description\">The background color for the header.</td>\n            <td class=\"value\">var(--wuf-color-primary)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-header-height</td>\n            <td class=\"description\">The header height.</td>\n            <td class=\"value\">60px</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-header-link-color</td>\n            <td class=\"description\">The color to use for links in the header.</td>\n            <td class=\"value\">var(--wuf-color-primary-lighter-50)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-header-link-hover-color</td>\n            <td class=\"description\">The color to use for header link hover.</td>\n            <td class=\"value\">var(--wuf-color-primary-lighter-60)</td>\n        </tr>\n        <tr class=\"section-title\">\n            <td colspan=\"3\">\n                Sidebar\n                <div class=\"description\">For additional sidebar-related CSS custom properties view documentation for <a\n                    routerLink=\"/components/navigation\">Navigation</a> and <a routerLink=\"/components/navigationfooter\">Navigation\n                    Footer</a>.\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-sidebar-width</td>\n            <td class=\"description\">The initial width of the sidebar. Note that the user can override this value using\n                the sidebar resizer drag handle.\n            </td>\n            <td class=\"value\">230px</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-sidebar-color</td>\n            <td class=\"description\">The text color of content displayed in the sidebar.</td>\n            <td class=\"value\">var(--wuf-color-secondary-lighter-50)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-sidebar-bg-color</td>\n            <td class=\"description\">The background color for the sidebar.</td>\n            <td class=\"value\">var(--wuf-color-secondary)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-sidebar-scroll-track-bg-color</td>\n            <td class=\"description\">The sidebar scroll bar's track color (Note that Firefox does not support scrollbar\n                styling)\n            </td>\n            <td class=\"value\">var(--wuf-color-secondary-darker-5)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-sidebar-scroll-thumb-bg-color</td>\n            <td class=\"description\">The sidebar scroll bar's thumb color (Note that Firefox does not support scrollbar\n                styling)\n            </td>\n            <td class=\"value\">var(--wuf-color-secondary-lighter-20)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-sidebar-resizer-width</td>\n            <td class=\"description\">The width of the sidebar resizer bar</td>\n            <td class=\"value\">6px</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-sidebar-resizer-bg-color</td>\n            <td class=\"description\">The background color of the sidebar resizer bar.</td>\n            <td class=\"value\">var(--wuf-color-gray-300)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-sidebar-resizer-draghandle-color</td>\n            <td class=\"description\">The draghandle color for the sidebar resizer bar.</td>\n            <td class=\"value\">var(--wuf-color-gray-100)</td>\n        </tr>\n        <tr class=\"section-title\">\n            <td colspan=\"3\">\n                Tabs\n                <div class=\"description\">Tabs are a component local only to the Living Style Guide. The following values\n                    are provided in the case a developer would like to copy the local tab component from this app for\n                    use in other applications.\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-tabs-color</td>\n            <td class=\"description\">Tab label text color.</td>\n            <td class=\"value\">var(--wuf-body-color)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-tabs-wrap-bg-color</td>\n            <td class=\"description\">The background color against which the tabs appear. This is not the color of the\n                tabs themselves; rather it is the color of the parent container for the tabs. By default it matches the\n                color of the content toolbar.\n            </td>\n            <td class=\"value\">var(--wuf-color-gray-200)</td>\n        </tr>\n        <tr class=\"section-title\">\n            <td colspan=\"3\">\n                Pagination Links\n            </td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-pagination-color</td>\n            <td class=\"description\">Text color for pagination links.</td>\n            <td class=\"value\">var(--wuf-link-color)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-pagination-bg-color</td>\n            <td class=\"description\">Background color for normal pagination links.</td>\n            <td class=\"value\">var(--wuf-color-white)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-pagination-border-color</td>\n            <td class=\"description\">Border color for normal pagination links.</td>\n            <td class=\"value\">var(--wuf-border-color)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-pagination-hover-color</td>\n            <td class=\"description\">Text color for pagination links on hover.</td>\n            <td class=\"value\">var(--wuf-link-hover-color)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-pagination-hover-bg-color</td>\n            <td class=\"description\">Background color for pagination links on hover.</td>\n            <td class=\"value\">var(--wuf-color-gray-200)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-pagination-hover-border-color</td>\n            <td class=\"description\">Border color for pagination links on hover.</td>\n            <td class=\"value\">var(--wuf-color-gray-300)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-pagination-active-color</td>\n            <td class=\"description\">Text color for active pagination links.</td>\n            <td class=\"value\">var(--wuf-color-primary)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-pagination-active-bg-color</td>\n            <td class=\"description\">Background color for active pagination links.</td>\n            <td class=\"value\">var(--wuf-color-gray-200)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-pagination-active-border-color</td>\n            <td class=\"description\">Border color for active pagination links.</td>\n            <td class=\"value\">var(--wuf-color-primary)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-pagination-disabled-color</td>\n            <td class=\"description\">Text color for disabled pagination links.</td>\n            <td class=\"value\">var(--wuf-color-gray-600)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-pagination-disabled-bg-color</td>\n            <td class=\"description\">Background color for disabled pagination links.</td>\n            <td class=\"value\">var(--wuf-color-white)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-pagination-disabled-border-color</td>\n            <td class=\"description\">Border color for disabled pagination links.</td>\n            <td class=\"value\">var(--wuf-color-gray-300)</td>\n        </tr>\n        <tr class=\"section-title\">\n            <td colspan=\"3\">\n                Scrollbars\n            </td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-scroll-track-bg-color</td>\n            <td class=\"description\">The scrollbar track color for scrollable areas. Only compatible with webkit-based\n                browsers (like Chrome and Safari).\n            </td>\n            <td class=\"value\">var(--wuf-color-gray-200)</td>\n        </tr>\n        <tr>\n            <td class=\"propName\">--wuf-scroll-thumb-bg-color</td>\n            <td class=\"description\">The scrollbar thumb color for scrollable areas. Only compatible with webkit-based\n                browsers (like Chrome and Safari).\n            </td>\n            <td class=\"value\">var(--wuf-color-gray-400)</td>\n        </tr>\n    </table>\n\n</wuf-content-main>\n\n<wuf-content-footer>\n    <!-- insert page footer content here -->\n</wuf-content-footer>\n","/*\n * Copyright (c) 2018 Dematic, Corp.\n * Licensed under the MIT Open Source: https://opensource.org/licenses/MIT\n */\n\nimport { Component, OnInit } from '@angular/core';\n\n\n@Component({\n    selector: 'app-layout-css-props',\n    templateUrl: './css-properties.component.html',\n    styleUrls: ['./css-properties.component.scss']\n})\nexport class SetupCssPropertiesComponent implements OnInit {\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n}\n","<!--\n  ~ Copyright (c) 2018 Dematic, Corp.\n  ~ Licensed under the MIT Open Source: https://opensource.org/licenses/MIT\n  -->\n\n<wuf-content-header>\n    <!-- insert page header content here -->\n    <ng-container toolbarLeft>\n        <wuf-breadcrumb [items]=\"[{ link: '/', label: 'Introduction' }, { link: '/setup', label: 'Application Setup' }, { link: null, label: 'Layout Components', active: true }]\"></wuf-breadcrumb>\n    </ng-container>\n\n    <ng-container toolbarRight>\n        <!--page-level utilities here-->\n    </ng-container>\n</wuf-content-header>\n\n<wuf-content-main>\n    <!-- insert page content here -->\n    <h1>Layout Components</h1>\n\n    <p>The Common Components Library provides a number of components related to layout. These components are intended\n        to\n        handle basic page layouts and orientations.</p>\n\n    <hr>\n\n    <h2>Page Scaffolding</h2>\n\n    <p>Basic page scaffolding is provided by the <code>&lt;wuf-content-header&gt;</code>,\n        <code>&lt;wuf-content-main&gt;</code>, and <code>&lt;wuf-content-footer&gt;</code> components.</p>\n\n    <p>Every page in your application should include these three components. Even if you don't intend to use all three,\n        we recommend including each for consistency and for future functionality. Consider them layout \"slots\" into\n        which your page content can be added. The components will handle the generation and styling of your page's\n        layout HTML/CSS while you, as a developer, focus on the page content placed inside each.</p>\n\n    <wuf-code-sample type=\"html\" [code]=\"layoutCodeBasic\"></wuf-code-sample>\n\n    <hr>\n\n    <h2>&lt;wuf-content-header&gt;</h2>\n\n    <p>The <code>&lt;wuf-content-header&gt;</code> slot is used to add a <a routerLink=\"/components/toolbars\">toolbar</a>,\n        <a routerLink=\"/components/breadcrumbs\">breadcrumb trail</a>, and page-level utility links to an application\n        page. Or other content that is not scrollable and need to stay on top.</p>\n\n    <wuf-code-sample type=\"html\" [code]=\"headerCode\"></wuf-code-sample>\n\n    <hr>\n\n    <h2>&lt;wuf-content-main&gt;</h2>\n\n    <p>The <code>&lt;wuf-content-main&gt;</code> slot is used to host the main page content. It generates the HTML/CSS\n        necessary to control content padding, content scrolling, etc.</p>\n\n    <wuf-code-sample type=\"html\" [code]=\"contentCode\"></wuf-code-sample>\n\n    <hr>\n\n    <h2>&lt;wuf-content-footer&gt;</h2>\n\n    <p>The <code>&lt;wuf-content-footer&gt;</code> slot is used to (optionally) display page-level footer content. A\n        page\n        footer is fixed in position and always appears at the bottom of the content area overlaid on TOP of page\n        content.</p>\n\n    <wuf-code-sample type=\"html\" [code]=\"footerCode\"></wuf-code-sample>\n\n    <p>The page footer is not intended to be displayed at all times and is recommended to show only when additional\n        details need to be shown as the result of an action taken elsewhere on the page. Use the following code to\n        toggle the content footer on/off:</p>\n\n    <wuf-code-sample type=\"typescript\" [code]=\"footerToggleCode1\"></wuf-code-sample>\n\n    <p>The add the following example HTML to your page:</p>\n\n    <wuf-code-sample type=\"html\" [code]=\"footerToggleCode2\"></wuf-code-sample>\n\n    <p>Click here for an example of toggling a page footer:\n        <button mat-raised-button (click)=\"toggleFooter()\">toggle footer</button>\n    </p>\n\n</wuf-content-main>\n\n<wuf-content-footer>\n    Hi! I'm a content footer.\n</wuf-content-footer>\n","/*\n * Copyright (c) 2018 Dematic, Corp.\n * Licensed under the MIT Open Source: https://opensource.org/licenses/MIT\n */\n\nimport { Component, OnInit } from '@angular/core';\nimport { WufContentFooterService } from '@anviltech/wuf-ang-layout';\n\n\n@Component({\n    selector: 'app-layout-components',\n    templateUrl: './layout-components.component.html',\n    styleUrls: ['./layout-components.component.scss']\n})\nexport class LayoutComponentsComponent implements OnInit {\n\n    constructor(private footerService: WufContentFooterService) {\n    }\n\n    ngOnInit() {\n    }\n\n    headCode = `<base href=\"/\">\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    `;\n\n    layoutCodeBasic = `<wuf-content-header>\n    <!-- insert page header content here -->\n    </wuf-content-header>\n\n    <wuf-content-main>\n    <!-- insert page content here -->\n    </wuf-content-main>\n    \n    <wuf-content-footer>\n    <!-- insert page footer content here -->\n    </wuf-content-footer>\n    `;\n\n    headerCode = `\n    <wuf-content-header>\n        <!-- insert page header content here -->\n        <ng-container toolbarLeft>\n            <wuf-breadcrumb [items]=\"[{ link: '/', label: 'Introduction' }, { link: '/setup', label: 'Application Setup' }, { link: null, label: 'Layout Components', active: true }]\"></wuf-breadcrumb>\n        </ng-container>\n    \n        <ng-container toolbarRight>\n            <!--page-level utilities here-->\n        </ng-container>\n    </wuf-content-header>\n    `;\n\n    contentCode = `\n    <wuf-content-main>\n        Page content goes here\n    </wuf-content-main>\n    `;\n\n    footerCode = `\n    <wuf-content-footer>\n        footer content goes here\n    </wuf-content-footer>\n    `;\n\n    footerToggleCode1 = `import { Component, OnInit } from '@angular/core';\n    import { WufContentFooterService } from '@anviltech/wuf-ang-layout';\n    \n    \n    @Component({\n        selector: 'app-layout-components',\n        templateUrl: './layout-components.component.html',\n        styleUrls: ['./layout-components.component.scss']\n    })\n    export class LayoutComponentsComponent implements OnInit {\n    \n        constructor(private footerService: WufContentFooterService) {\n        }\n    \n        ngOnInit() {\n        }\n        \n        toggleFooter() {\n            this.footerService.toggleFooter();\n        }\n    }\n    `;\n\n    footerToggleCode2 = `<a [routerLink]=\"\" (click)=\"toggleFooter()\">toggle page footer</a>`;\n\n    toggleFooter() {\n        this.footerService.toggleFooter();\n    }\n\n}\n","<!--\n  ~ Copyright (c) 2018 Dematic, Corp.\n  ~ Licensed under the MIT Open Source: https://opensource.org/licenses/MIT\n  -->\n\n<wuf-content-header>\n    <!-- insert page header content here -->\n    <ng-container toolbarLeft>\n        <wuf-breadcrumb\n            [items]=\"[{ link: '/', label: 'Introduction' }, { link: '/setup', label: 'Application Setup' }, { link: null, label: 'Main vs Basic Layout', active: true }]\"></wuf-breadcrumb>\n    </ng-container>\n\n    <ng-container toolbarRight>\n        <!--page-level utilities here-->\n    </ng-container>\n</wuf-content-header>\n\n<wuf-content-main>\n    <!-- insert page content here -->\n    <h1>Layout</h1>\n\n    <p>There are two layouts included with the Quick Start Application:</p>\n\n    <ul>\n        <li><strong>Main</strong>. The main layout includes a header and navigation component. This is the primary\n            layout for most pages in an app.\n        </li>\n        <li><strong>Basic</strong>. The basic layout <strong>excludes</strong> header and navigation components and\n            shows <strong>only</strong> the page content. This layout can be helpful for pages like login, 404, or error\n            pages where showing header and navigation is not desirable.\n        </li>\n    </ul>\n\n    <div class=\"container-fluid\">\n        <div class=\"row swatch-row\">\n            <div class=\"col-md\">\n                <h4 class=\"text-center\">Main Layout</h4>\n                <img src=\"/assets/images/example_images/layouts/main.svg\">\n            </div>\n\n            <div class=\"col-md\">\n                <h4 class=\"text-center\">Basic Layout</h4>\n                <img src=\"/assets/images/example_images/layouts/basic.svg\">\n            </div>\n\n        </div>\n    </div>\n    <caption style=\"margin-top: 0\">Main and Basic layouts with their associated DOM elements</caption>\n\n    <hr>\n\n    <p>We've already discussed the <a routerLink=\"/setup/layoutcomponents\">scaffolding layout components for use on each\n        application page</a>. There are two additional layout components that are used at a higher level in your\n        application and that can be applied to any application page:</p>\n\n    <ul>\n        <li>&lt;wuf-view-main&gt;</li>\n        <li>&lt;wuf-view-basic&gt;</li>\n    </ul>\n\n    <p>Which of these two components a page uses will determine whether that page gets the <strong>Main</strong> layout\n        or the <strong>Basic</strong> layout. We will first describe how and where each of these components is used in\n        your application and then explain how to apply one or the other to a given page in your application.</p>\n\n    <hr>\n\n    <h2>Main Layout</h2>\n\n    <p>The &lt;wuf-view-main&gt; and &lt;wuf-view-basic&gt; components each live within their own parent component hosted\n        within the application. The Quick Start application, for example, places these components at <code>/src/app/_internal/layouts/</code>.\n    </p>\n\n    <p>The file <code>/src/app/_internal/layouts/main/<strong>main.component.html</strong></code> hosts the &lt;wuf-view-main&gt;\n        component and looks like this:</p>\n\n    <wuf-code-sample type=\"html\" [code]=\"mainCodeHtml\"></wuf-code-sample>\n    <caption>Contents of /src/app/_internal/layouts/main/main.component.html</caption>\n\n    <p>The &lt;wuf-view-main&gt; takes one attribute: <strong><code>[logoRoute]</code></strong>. The logoRoute attribute\n        is optional. If used, it takes a value for a routerLink and it is applied to the logo that appears in the\n        application header. Gernerally you will want to use the application's root path (e.g. \"/\") so that when the user\n        clicks the logo they will return to the application root.</p>\n\n    <p>Inside the &lt;wuf-view-main&gt;'s content, you'll see five &lt;ng-container&gt; slots, each with one of following\n        selectors:</p>\n\n    <ul>\n        <li><strong>sidebarNavigation</strong>. This slot hosts the <a routerLink=\"/components/navigation\">&lt;wuf-navigation&gt;</a>\n            component.\n        </li>\n        <li><strong>sidebarFooter</strong>. This slot hosts the <a routerLink=\"/components/navigation-footer\">&lt;wuf-sidebar-footer&gt;</a>\n            component.\n        </li>\n        <li><strong>toolbarContent</strong>. This slot hosts content to display in the header, including the application\n            title. Note that the hamburger icon for expanding/collapsing the sidebar is created for you and does not\n            need to be manually added here.\n        </li>\n        <li><strong>utilities</strong>. This slot hosts any application-level menus or utilities you want to include on\n            the right side of your application's header.\n        </li>\n        <li><strong>main</strong>. This slots hosts the &lt;router-outlet&gt; and is where each page gets inserted\n            during the Angular routing process.\n        </li>\n    </ul>\n\n    <p>Let's take a look at the contents of <code>/src/app/_internal/layouts/main/main.component.ts</code>.</p>\n\n    <wuf-code-sample type=\"typescript\" [code]=\"mainCodeComponent\"></wuf-code-sample>\n    <caption>Contents of /src/app/_internal/layouts/main/main.component.ts</caption>\n\n    <p>Note that this component is fetching nav data from a service\n        <code>this.navService.getNavData(this.navDataUrl)</code> and then passing the returned .json object to the &lt;wuf-navigation&gt;\n        component.</p>\n\n    <hr>\n\n    <h2>Basic Layout</h2>\n\n    <p>The file <code>/src/app/_internal/layouts/basic/<strong>basic.component.html</strong></code> hosts the &lt;wuf-view-basic&gt;\n        component and looks like this:</p>\n\n    <wuf-code-sample type=\"html\" [code]=\"basicCodeHtml\"></wuf-code-sample>\n    <caption>Contents of /src/app/_internal/layouts/basic/basic.component.html</caption>\n\n    <p>Unlike &lt;wuf-view-main&gt;, the &lt;wuf-view-basic&gt; component hosts only <strong>one</strong> slot: <strong>main</strong>.\n        As with the <strong>main</strong> slot in &lt;wuf-view-main&gt;, this slot hosts &lt;router-outlet&gt;.</p>\n\n    <p>The component code for &lt;wuf-view-basic&gt; is similarly very simple:</p>\n\n    <wuf-code-sample type=\"typescript\" [code]=\"basicCodeComponent\"></wuf-code-sample>\n    <caption>Contents of /src/app/_internal/layouts/basic/basic.component.ts</caption>\n\n    <hr>\n\n    <h2>Layout Module</h2>\n\n    <p>Create a layout module to host the Main and Basic components created above. The Quick Start application places\n        its layout module at <code>/src/app/_internal/layouts/layouts.module.ts</code>:</p>\n\n    <wuf-code-sample type=\"typescript\" [code]=\"layoutsModuleCode\"></wuf-code-sample>\n    <caption>Contents of /src/app/_internal/layouts/layouts.module.ts</caption>\n\n    <hr>\n\n    <h2>Switching Between Main and Basic</h2>\n\n    <p>Now that we have our Main and Basic layout components and a layouts module ready to use, it's time to assign each\n        of our pages to one layout or the other. This is done in through the Angular routing process.</p>\n\n    <wuf-code-sample type=\"typescript\" [code]=\"routesCode\"></wuf-code-sample>\n    <caption>Contents of an example routes.ts file</caption>\n\n    <p>In our <code>routes.ts</code> file we're creating two different arrays to host our routes: <code>routes_layout_main</code>\n        and <code>routes_layout_basic</code>.</p>\n\n    <p>We then create a <code>routes</code> array and assign both the <code>routes_layout_main</code> and <code>routes_layout_basic</code>\n        array to a \"component-less route's\" (an empty path string) \"children\" property. The value for the \"component\"\n        property is \"LayoutMainComponent\" for the <code>routes_layout_main</code> collection and <code>routes_layout_basic</code>\n        for the <code>routes_layout_main</code> collection.</p>\n\n    <p>In the above example, the <code>MyPageComponent</code> route is assigned to the <code>routes_layout_main</code>\n        array. When the \"mypage\" route is loaded, my page content will appear wrapped in the Main layout.</p>\n\n    <p>If I want <code>MyPageComponent</code> to use the Basic layout, however, making the change is as simple as moving\n        the component from the <code>routes_layout_main</code> array to the <code>routes_layout_basic</code> array.\n        That's it!</p>\n\n    <wuf-code-sample type=\"typescript\" [code]=\"routesCode2\"></wuf-code-sample>\n    <caption>Example of moving a component from Main layout to Basic layout</caption>\n\n</wuf-content-main>\n\n<wuf-content-footer>\n    <!-- insert page footer content here -->\n</wuf-content-footer>\n","/*\n * Copyright (c) 2018 Dematic, Corp.\n * Licensed under the MIT Open Source: https://opensource.org/licenses/MIT\n */\n\nimport { Component, OnInit } from '@angular/core';\n\n\n@Component({\n    selector: 'app-layout-main-basic',\n    templateUrl: './main-basic.component.html',\n    styleUrls: ['./main-basic.component.scss']\n})\nexport class LayoutMainBasicComponent implements OnInit {\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n    mainCodeHtml = `\n    <wuf-view-main [logoRoute]=\"logoRoute\">\n        <ng-container sidebarNavigation>\n            <wuf-navigation [data]=\"navData\"></wuf-navigation>\n        </ng-container>\n    \n        <ng-container sidebarFooter>\n            <wuf-sidebar-footer></wuf-sidebar-footer>\n        </ng-container>\n    \n        <ng-container toolbarLeft>\n            <!--Optionally add app-level title here-->\n            [Application Name]\n        </ng-container>\n    \n        <ng-container toolbarRight>\n            <!--Add app-level utilities here-->\n        </ng-container>\n    \n        <ng-container main>\n            <router-outlet></router-outlet>\n        </ng-container>\n    </wuf-view-main>\n    `;\n\n    mainCodeComponent = `\n    import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\n    import { WufNavigationService } from '@anviltech/wuf-ang-navigation';\n    import { WufConfigurationService } from '@anviltech/wuf-ang-configuration';\n    import { WufDrawerService } from '@anviltech/wuf-ang-drawer';\n    \n    @Component({\n        selector: 'app-layout-main',\n        templateUrl: './main.component.html',\n        styleUrls: ['./main.component.scss'],\n        providers: [WufThemeService, ThemeListService],\n        encapsulation: ViewEncapsulation.Emulated\n    })\n    export class LayoutMainComponent implements OnInit {\n    \n        // Set the URL from which to fetch the routes/navigation data object.\n        navDataUrl: string = '/api/navigation';\n        navData: any;\n        logoRoute: string = '/'; // Route path to take users when clicking on header logo\n    \n        constructor(private navService: WufNavigationService) {\n        }\n    \n        ngOnInit() {\n            // Fetch nav data\n            this.navService.getNavData(this.navDataUrl)\n                .subscribe(\n                    results => {\n                        this.navData = results.data.links;\n                    },\n                    err => {\n                        console.log('Error retrieving nav data:', err);\n                    }\n                );\n        }\n    \n    }\n    `;\n\n    basicCodeHtml = `\n    <wuf-view-basic>\n        <ng-container main>\n            <router-outlet></router-outlet>\n        </ng-container>\n    </wuf-view-basic>\n    `;\n\n    basicCodeComponent = `\n    import { Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n\n    @Component({\n        selector: 'app-layout-basic',\n        templateUrl: './basic.component.html',\n        styleUrls: ['./basic.component.scss'],\n        encapsulation: ViewEncapsulation.Emulated\n    })\n    export class LayoutBasicComponent implements OnInit {\n    \n        constructor() {\n        }\n    \n        ngOnInit() {\n        }\n    \n    }\n\n    `;\n\n    layoutsModuleCode = `\n    import { CUSTOM_ELEMENTS_SCHEMA, NgModule, ModuleWithProviders } from '@angular/core';\n    import { CommonModule } from '@angular/common';\n    import { RouterModule } from '@angular/router';\n    \n    /***** Import WUF *****/\n    import { WufConfigurationService } from '@anviltech/wuf-ang-configuration';\n    import { WufLayoutModule } from '@anviltech/wuf-ang-layout';\n    import { WufDrawerModule } from '@anviltech/wuf-ang-drawer';\n    import { WufNavigationModule } from '@anviltech/wuf-ang-navigation';\n    \n    /***** 3rd Party *****/\n    import { MatTooltipModule } from '@angular/material';\n    import { CustomMaterialModule } from '../../internal/material.module';\n    \n    /***** Local layout components *****/\n    import { LayoutMainComponent } from './main/main.component';\n    import { LayoutBasicComponent } from './basic/basic.component';\n    \n    /***** Exports *****/\n    export { LayoutMainComponent } from './main/main.component';\n    export { LayoutBasicComponent } from './basic/basic.component';\n    \n    @NgModule({\n        schemas: [\n            CUSTOM_ELEMENTS_SCHEMA\n        ],\n        imports: [\n            CommonModule,\n            RouterModule,\n            CustomMaterialModule,\n    \n            // WUF\n            WufLayoutModule,\n            WufDrawerModule,\n            WufNavigationModule\n        ],\n        declarations: [\n            LayoutMainComponent,\n            LayoutBasicComponent\n        ]\n    })\n    export class LayoutsModule {}\n    `;\n\n    routesCode = `\n    // Pages with main layout (header, footer, nav, content area)\n    const routes_layout_main = [\n        { path: 'mypage', component: MyPageComponent, pathMatch: 'full' },\n        { path: '', component: DefaultPageComponent, pathMatch: 'full' }\n    ];\n    \n    // Pages with basic layout (no header, footer, or nav)\n    const routes_layout_basic = [\n    ];\n    \n    const routes = [\n        {\n            path: '',\n            children: [\n                {\n                    path: '',\n                    component: LayoutMainComponent,\n                    children: routes_layout_main\n                },\n                {\n                    path: '',\n                    component: LayoutBasicComponent,\n                    children: routes_layout_basic\n                }\n            ]\n        }\n    ];\n    \n    @NgModule({\n        imports: [\n            CommonModule,\n            LayoutsModule,\n            RouterModule.forChild(routes)\n        ]\n    })\n    `;\n\n    routesCode2 = `\n    // Pages with main layout (header, footer, nav, content area)\n    const routes_layout_main = [\n        { path: '', component: DefaultPageComponent, pathMatch: 'full' }\n    ];\n    \n    // Pages with basic layout (no header, footer, or nav)\n    const routes_layout_basic = [\n        { path: 'mypage', component: MyPageComponent, pathMatch: 'full' },\n    ];\n    `;\n}\n","/*\r\n * Copyright (c) 2018 Dematic, Corp.\r\n * Licensed under the MIT Open Source: https://opensource.org/licenses/MIT\r\n */\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n/***** Import page layouts *****/\r\nimport { LayoutBasicComponent, LayoutMainComponent, LayoutsModule } from '../../_internal/layouts/layouts.module';\r\n\r\n\r\n/***** Import page modules *****/\r\nimport { SetupIntroComponent } from './setup-intro/setup-intro.component';\r\nimport { SetupBaseStylesComponent } from './base-styles/base-styles.component';\r\nimport { LayoutComponentsComponent } from './layout-components/layout-components.component';\r\nimport { LayoutMainBasicComponent } from './main-basic/main-basic.component';\r\nimport { SetupCssPropertiesComponent } from './css-properties/css-properties.component';\r\nimport { SetupConfigurationComponent } from './configuration/configuration.component';\r\n\r\n// Pages with main layout (header, footer, nav, content area)\r\nconst routes_layout_main = [\r\n    {path: 'basestyles', component: SetupBaseStylesComponent, pathMatch: 'full'},\r\n    {path: 'layoutcomponents', component: LayoutComponentsComponent, pathMatch: 'full'},\r\n    {path: 'mainbasic', component: LayoutMainBasicComponent, pathMatch: 'full'},\r\n    {path: 'cssprops', component: SetupCssPropertiesComponent, pathMatch: 'full'},\r\n    {path: 'configuration', component: SetupConfigurationComponent, pathMatch: 'full'},\r\n    {path: '', component: SetupIntroComponent, pathMatch: 'full'}\r\n];\r\n\r\n// Pages with basic layout (no header, footer, or nav)\r\nconst routes_layout_basic = [];\r\n\r\nconst routes = [\r\n    {\r\n        path: '',\r\n        // canActivateChild: [AuthGuard], // Ensures user is authenticated before allowing access to any child route\r\n        children: [\r\n            {\r\n                path: '', // This is a component-less route, which makes it easier to guard child routes,\r\n                // canActivateChild: [AuthGuard], // Ensures user is authenticated before allowing access to any child route\r\n                component: LayoutMainComponent,\r\n                children: routes_layout_main\r\n            },\r\n            {\r\n                path: '', // This is a component-less route, which makes it easier to guard child routes,\r\n                // canActivateChild: [AuthGuard], // Ensures user is authenticated before allowing access to any child route\r\n                component: LayoutBasicComponent,\r\n                children: routes_layout_basic\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        LayoutsModule,\r\n        RouterModule.forChild(routes)\r\n    ]\r\n})\r\nexport class RoutesModule {\r\n}\r\n","<!--\n  ~ Copyright (c) 2018 Dematic, Corp.\n  ~ Licensed under the MIT Open Source: https://opensource.org/licenses/MIT\n  -->\n\n<wuf-content-header>\n    <!-- insert page header content here -->\n    <ng-container toolbarLeft>\n        <wuf-breadcrumb\n            [items]=\"[{ link: '/', label: 'Introduction' }, { link: null, label: 'Application Setup', active: true }]\"></wuf-breadcrumb>\n    </ng-container>\n\n    <ng-container toolbarRight>\n        <!--page-level utilities here-->\n    </ng-container>\n</wuf-content-header>\n\n<wuf-content-main>\n    <!-- insert page content here -->\n    <h1>Application Setup</h1>\n\n    <p>The Common Components Library provides a number of components, styles, and application configuration options. By\n        assembling the components as we need, loading some base styles, and tweaking some configuration settings, we can\n        build pages with headers, sidebars, footers, and content areas easily and with a high degree of flexibility.\n        Additionally, the base styles provided by common-components give us all the styles we need for common HTML\n        elements in order to ensure that they match our style guide standards. Finally, by utilizing the pre-built layouts\n        included in the Quick Start app and a number of configuration options, we can easily set the orientation and\n        style of layout for each page. In a nutshell, by taking care of layouts and base styles for us, we can focus our\n        development efforts on page <strong>content</strong>, knowing that everything else is already handled for us.\n    </p>\n\n    <p>In order to better understand how layouts work within the WUF framework, we recommend reading each of the\n        following sections and following their instructions to ensure your application is correctly set up with the\n        layouts and base styles it needs.</p>\n\n    <ul>\n        <li><strong><a routerLink=\"/setup/basestyles\">Base Styles</a></strong>. Describes how to add base styles to your\n            app.\n        </li>\n        <li><strong><a routerLink=\"/setup/layoutcomponents\">Layout Components</a></strong>. Documents the various layout\n            components available for your app to use.\n        </li>\n        <li><strong><a routerLink=\"/setup/mainbasic\">Main vs Basic</a></strong>. Documents the two layouts built-in to\n            the Quick Start application and how to switch between them.\n        </li>\n        <li><strong><a routerLink=\"/setup/configuration\">Configuration</a></strong>. Documents the use of application\n            configuration/settings.\n        </li>\n        <li><strong><a routerLink=\"/setup/cssprops\">CSS Variables</a></strong>. Documents the various layout-related and\n            base style CSS custom properties available.\n        </li>\n    </ul>\n\n</wuf-content-main>\n\n<wuf-content-footer>\n    <!-- insert page footer content here -->\n</wuf-content-footer>\n","/*\n * Copyright (c) 2018 Dematic, Corp.\n * Licensed under the MIT Open Source: https://opensource.org/licenses/MIT\n */\n\nimport { Component, OnInit } from '@angular/core';\n\n\n@Component({\n    selector: 'app-layout',\n    templateUrl: './setup-intro.component.html',\n    styleUrls: ['./setup-intro.component.scss']\n})\nexport class SetupIntroComponent implements OnInit {\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n}\n","/*\r\n * Copyright (c) 2018 Dematic, Corp.\r\n * Licensed under the MIT Open Source: https://opensource.org/licenses/MIT\r\n */\r\n\r\n/***** Angular modules *****/\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n/***** Basic app components *****/\r\nimport { RoutesModule } from './routes';\r\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\n\r\n/***** Import WUF *****/\r\nimport { WufLayoutModule } from '@anviltech/wuf-ang-layout';\r\n\r\n/***** 3rd party imports *****/\r\nimport { NgxMdModule } from 'ngx-md';\r\nimport { UtilsModule } from '../../_internal/utils/utils.module';\r\nimport { CustomMaterialModule } from '../../_internal/material.module';\r\nimport { TranslateSharedLazyModule } from '../../_internal/translate.module';\r\n\r\n/***** Import page modules *****/\r\nimport { SetupIntroComponent } from './setup-intro/setup-intro.component';\r\nimport { SetupBaseStylesComponent } from './base-styles/base-styles.component';\r\nimport { LayoutComponentsComponent } from './layout-components/layout-components.component';\r\nimport { LayoutMainBasicComponent } from './main-basic/main-basic.component';\r\nimport { SetupCssPropertiesComponent } from './css-properties/css-properties.component';\r\nimport { SetupConfigurationComponent } from './configuration/configuration.component';\r\n\r\n@NgModule({\r\n    schemas: [\r\n        CUSTOM_ELEMENTS_SCHEMA\r\n    ],\r\n    imports: [\r\n        // Angular Imports\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        RouterModule,\r\n        CommonModule,\r\n\r\n        // Util Module\r\n        UtilsModule,\r\n\r\n        // WUF\r\n        WufLayoutModule,\r\n\r\n        // 3rd Party Imports\r\n        NgxMdModule, // Markdown\r\n        CustomMaterialModule,\r\n        TranslateSharedLazyModule,\r\n\r\n        // Routes (Keep as last module loaded)\r\n        RoutesModule\r\n\r\n    ],\r\n    declarations: [\r\n        // Page imports\r\n        SetupIntroComponent,\r\n        SetupBaseStylesComponent,\r\n        LayoutComponentsComponent,\r\n        LayoutMainBasicComponent,\r\n        SetupCssPropertiesComponent,\r\n        SetupConfigurationComponent\r\n    ]\r\n})\r\nexport class SetupModule {\r\n}\r\n"],"sourceRoot":""}