/*!
 * Copyright (c) 2018 Dematic, Corp.
 * Licensed under the MIT Open Source: https://opensource.org/licenses/MIT
 */

@import "~@angular/material/theming";
@import "~@material/theme/mdc-theme";
@import "~@material/theme/functions";
@import "~@material/button/mdc-button";
@import "../partials/variables";

// Be sure that you only ever include this mixin once!
@include mat-core();

// Color contrast
@function color-contrast($color) {
    // Light and dark text colors for use in our color contrast function.
    $text-dark: darken($color, 30);
    $text-light: $white;

    // The lightness value that determines when the lightness of color changes from "dark" to "light". Acceptable values are between 0 and 255.
    $contrast-threshold: 150;

    $r: red($color);
    $g: green($color);
    $b: blue($color);

    $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

    @if ($yiq >= $contrast-threshold) {
        @return $text-dark;
    } @else {
        @return $text-light;
    }
}

/*
	Attempt to retrieve a color by key from the map passed in.  Default to the corresponding key value from $kg-mat-app-theme-colors.
 */
@function getMapColor($map, $key) {
    @if map-has-key($map, $key) {
        // If the passed map has the color, use it
        @return map-get($map, $key);
    } @else if (map-has-key($kg-mat-app-theme-colors, $key)) {
        // Otherwise, get the corresponding color from the default $kg-mat-app-theme-colors map
        @return map-get($kg-mat-app-theme-colors, $key);
    } @else {
        @warn "Unknown `#{$key}` in $map.";
        @return null;
    }
}

// NOTE: We're using our own local function override here
@function local-ink-color-for-fill_($text-colors, $text-style, $fill-color) {
    $contrast-tone: mdc-theme-contrast-tone($fill-color);

    @return map-get(map-get($text-colors, $contrast-tone), $text-style);
}

@function wuf-mat-make-palette($color) {
    $kg-mat-app-theme: (
        50: lighten($color, 50),
        100: lighten($color, 40),
        200: lighten($color, 30),
        300: lighten($color, 20),
        400: lighten($color, 10),
        500: $color,
        600: darken($color, 10),
        700: darken($color, 20),
        800: darken($color, 30),
        900: darken($color, 40),
        //A100: ???,
        //A200: ???,
        //A400: ???,
        //A700: ???,
        contrast: (
            50: color-contrast($color),
            100: color-contrast($color),
            200: color-contrast($color),
            300: color-contrast($color),
            400: color-contrast($color),
            500: color-contrast($color),
            600: color-contrast($color),
            700: color-contrast($color),
            800: color-contrast($color),
            900: color-contrast($color),
            //A100: ???,
            //A200: ???,
            //A400: ???,
            //A700: ???
        )
    );

    @return mat-palette($kg-mat-app-theme);
}

/** Create a Material Design theme for components
 */
@mixin wuf-mat-theme($primary, $accent, $warn) {

    // Define the palettes for your theme using the Material Design palettes available in palette.scss
    // (imported above). For each palette, you can optionally specify a default, lighter, and darker
    // hue. Available color palettes: https://www.google.com/design/spec/style/color.html
    $kg-mat-palette-primary: wuf-mat-make-palette($primary);
    $kg-mat-palette-accent: wuf-mat-make-palette($accent);

    // The warn palette is optional (defaults to red).
    $kg-mat-palette-warn: wuf-mat-make-palette($warn); //mat-palette($mat-red);

    // Create the theme object (a Sass map containing all of the palettes).
    $kg-mat-app-theme: mat-light-theme($kg-mat-palette-primary, $kg-mat-palette-accent, $kg-mat-palette-warn);

    // Include theme styles for core and each Angular Material component used in your app.
    // Alternatively, you can import and @include the theme mixins for each component
    // that you are using.
    @include angular-material-theme($kg-mat-app-theme);

    /***** Material Design (MDC) *****/
    // Create CSS custom properties for Material Design Web
    $mdc-theme-primary: $primary;
    $mdc-theme-on-primary: if(mdc-theme-contrast-tone($mdc-theme-primary) == "dark", #000, #fff);

    // The $mdc-theme-accent variable is DEPRECATED - it exists purely for backward compatibility.
    // The $mdc-theme-secondary* variables should be used for all new projects.
    $mdc-theme-accent: $accent;
    $mdc-theme-secondary: $mdc-theme-accent;
    $mdc-theme-on-secondary: if(mdc-theme-contrast-tone($mdc-theme-secondary) == "dark", #000, #fff);
    $mdc-theme-background: #fff; // White

    $mdc-theme-surface: #fff;
    $mdc-theme-on-surface: if(mdc-theme-contrast-tone($mdc-theme-surface) == "dark", #000, #fff);

    // Text colors according to light vs dark and text type.
    $text-colors: (
        dark: (
            primary: rgba(black, .87),
            secondary: rgba(black, .54),
            hint: rgba(black, .38),
            disabled: rgba(black, .38),
            icon: rgba(black, .38)
        ),
        light: (
            primary: white,
            secondary: rgba(white, .7),
            hint: rgba(white, .5),
            disabled: rgba(white, .5),
            icon: rgba(white, .5)
        )
    );

    // Primary text colors for each of the theme colors.
    $mdc-theme-property-values: (
        // Primary
        primary: $mdc-theme-primary,
        // Secondary
        secondary: $mdc-theme-secondary,
        // Background
        background: $mdc-theme-background,
        // Surface
        surface: $mdc-theme-surface,
        on-primary: $mdc-theme-on-primary,
        on-secondary: $mdc-theme-on-secondary,
        on-surface: $mdc-theme-on-surface,
        // Text-primary on "background" background
        text-primary-on-background: local-ink-color-for-fill_($text-colors, primary, $mdc-theme-background), // NOTE: we're using our own local-ink-color-for-fill_() function for this and the following
        text-secondary-on-background: local-ink-color-for-fill_($text-colors, secondary, $mdc-theme-background),
        text-hint-on-background: local-ink-color-for-fill_($text-colors, hint, $mdc-theme-background),
        text-disabled-on-background: local-ink-color-for-fill_($text-colors, disabled, $mdc-theme-background),
        text-icon-on-background: local-ink-color-for-fill_($text-colors, icon, $mdc-theme-background),
        // Text-primary on "light" background
        text-primary-on-light: local-ink-color-for-fill_($text-colors, primary, light),
        text-secondary-on-light: local-ink-color-for-fill_($text-colors, secondary, light),
        text-hint-on-light: local-ink-color-for-fill_($text-colors, hint, light),
        text-disabled-on-light: local-ink-color-for-fill_($text-colors, disabled, light),
        text-icon-on-light: local-ink-color-for-fill_($text-colors, icon, light),
        // Text-primary on "dark" background
        text-primary-on-dark: local-ink-color-for-fill_($text-colors, primary, dark),
        text-secondary-on-dark: local-ink-color-for-fill_($text-colors, secondary, dark),
        text-hint-on-dark: local-ink-color-for-fill_($text-colors, hint, dark),
        text-disabled-on-dark: local-ink-color-for-fill_($text-colors, disabled, dark),
        text-icon-on-dark: local-ink-color-for-fill_($text-colors, icon, dark)
    );

    // Create the CSS custom properties
    @each $style in map-keys($mdc-theme-property-values) {
        --mdc-theme-#{$style}: #{map-get($mdc-theme-property-values, $style)};
    }

    /*
        Because the Angular Material functions include a lot of styling outside of colors alone, we need to include
        additional overrides here along with ALL themes.
    */
    @include mat-overrides;
}

/** Create a theme for general layout and base styles
 */
@mixin wuf-theme-colors($map) {
    // Create local SCSS variables for colors, defaulting to a matching color key in $kg-mat-app-theme-colors
    $brand-primary: getMapColor($map, "primary");
    $brand-secondary: getMapColor($map, "secondary");
    $brand-accent: getMapColor($map, "accent");
    $brand-success: getMapColor($map, "success");
    $brand-info: getMapColor($map, "info");
    $brand-warning: getMapColor($map, "warning");
    $brand-danger: getMapColor($map, "danger");

    // Create CSS custom properties for every theme color passed in the map
    @each $name, $color in $map {
        --wuf-color-#{$name}: #{$color};
    }

    // Create CSS custom properties for RGB variants of theme colors -- these can be used in CSS rgb/rgba functions.  E.g. rgba(var(--wuf-color-rgb-primary), .5);
    @each $name, $color in $map {
        --wuf-color-rgb-#{$name}: #{red($color)}, #{green($color)}, #{blue($color)};
    }

    // Create CSS custom properties for lighter/darker shade variants of theme colors
    @each $name, $color in $map {
        --wuf-color-#{$name}-lighter-10: #{lighten($color, 10%)};
        --wuf-color-#{$name}-lighter-20: #{lighten($color, 20%)};
        --wuf-color-#{$name}-lighter-30: #{lighten($color, 30%)};
        --wuf-color-#{$name}-lighter-40: #{lighten($color, 40%)};
        --wuf-color-#{$name}-lighter-50: #{lighten($color, 50%)};
        --wuf-color-#{$name}-lighter-60: #{lighten($color, 60%)};
        --wuf-color-#{$name}-lighter-70: #{lighten($color, 70%)};
        --wuf-color-#{$name}-darker-5: #{darken($color, 5%)};
        --wuf-color-#{$name}-darker-10: #{darken($color, 10%)};
        --wuf-color-#{$name}-darker-15: #{darken($color, 15%)};
        --wuf-color-#{$name}-darker-20: #{darken($color, 20%)};
        --wuf-color-#{$name}-darker-25: #{darken($color, 25%)};
        --wuf-color-#{$name}-darker-30: #{darken($color, 30%)};
        --wuf-color-#{$name}-darker-35: #{darken($color, 35%)};
        --wuf-color-#{$name}-darker-40: #{darken($color, 40%)};
        --wuf-color-#{$name}-darker-45: #{darken($color, 45%)};
        --wuf-color-#{$name}-darker-50: #{darken($color, 50%)};
    }

    // Create a Material Design Theme
    @include wuf-mat-theme($brand-primary, $brand-accent, $brand-danger);
}

@mixin wuf-theme-logo($url, $width: 200px, $height: 35px) {
    --wuf-logo-url: #{'url(' + $url + ')'};
    --wuf-header-logo-width: #{$width};
    --wuf-header-logo-height: #{$height};
}

@mixin wuf-theme-button-radius($radius) {
    button.mat-button, button.mat-raised-button,
    a.mat-button, a.mat-raised-button {
        @include mdc-button-corner-radius($radius);
    }
}

/** Create a theme for typography styles
 */
@mixin wuf-theme-typography(
    $font-color: $body-color,
	$font-family-sans-serif: $font-family-sans-serif,
	$font-family-serif: $font-family-serif,
	$font-monospace: $font-family-monospace,
	$font-family-base: $font-family-base,
	$font-size: $font-size-base,
	$headings-font-family: $headings-font-family,
	$headings-weight: $headings-font-weight,
	$headings-color: $headings-color,
	$h1-size: $h1-font-size,
	$h2-size: $h2-font-size,
	$h3-size: $h3-font-size,
	$h4-size: $h4-font-size,
	$h5-size: $h5-font-size,
	$h6-size: $h6-font-size
) {
    --wuf-body-color: #{$font-color};
    --wuf-font-family-sans-serif: #{$font-family-sans-serif};
    --wuf-font-family-serif: #{$font-family-serif};
    --wuf-font-family-monospace: #{$font-monospace};
    --wuf-font-family-base: #{$font-family-base};
    --wuf-font-size-base: #{$font-size};
    --wuf-headings-font-family: #{$headings-font-family};
    --wuf-headings-font-weight: #{$headings-weight};
    --wuf-headings-color: #{$headings-color};
    --wuf-h1-font-size: #{$h1-size};
    --wuf-h2-font-size: #{$h2-size};
    --wuf-h3-font-size: #{$h3-size};
    --wuf-h4-font-size: #{$h4-size};
    --wuf-h5-font-size: #{$h5-size};
    --wuf-h6-font-size: #{$h6-size};
}
